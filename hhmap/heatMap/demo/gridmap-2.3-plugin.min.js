! function() {
    ("undefined" != typeof window.Maplet || "undefined" != typeof MMap) && ("undefined" != typeof window.Maplet ? Maplet : MPlugin).define("gridmap", function() {
        return new function() {
            var a = null,
                b = 20037508.34,
                c = null,
                d = null,
                e = [],
                f = [],
                g = [],
                h = [],
                i = 0,
                j = 18,
                k = 18,
                l = 1,
                m = 256,
                n = !1,
                o = null,
                p = null,
                q = null,
                r = null,
                s = {
                    DbName: "Felankia_GridMap",
                    DataObjName: "Datas",
                    CountObjName: "Counts",
                    version: 22,
                    db: null
                },
                t = [];
            this.init = function(b, e) {
                j = e || j, c = document.createElement("canvas");
                var h = document.createElement("div");
                if (h.style.width = "0px", h.style.height = "0px", h.appendChild(c), q = document.createElement("div"), q.style.display = "none", q.style.position = "absolute", document.body.appendChild(q), a = b, MEvent.addListener(a, "zoom", function() {
                        w(), z()
                    }), MEvent.addListener(a, "pan", z), d = new MMarker(new MPoint(0, 0), new MIcon(h, 0, 0)), d.autoHide = !1, a.addOverlay(d), r = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.mozIndexedDB, !r) return void console.log("您的浏览器不支持IndexedDB！");
                var k = r.open(s.DbName, s.version);
                k.onerror = function() {
                    console.log("IndexedDB open error!")
                }, k.onsuccess = function(a) {
                    s.db = a.target.result, s.db.transaction([s.CountObjName]).objectStore(s.CountObjName).openCursor().onsuccess = function(a) {
                        var b = a.target.result;
                        b && ("all" == b.key ? i = b.value.total : (f[b.key] = b.value.count, g[b.key] = b.value.max), b["continue"]())
                    }
                }, k.onupgradeneeded = function(a) {
                    a.target.result.objectStoreNames.contains(s.DataObjName) || a.target.result.createObjectStore(s.DataObjName, {
                        keyPath: "geohash"
                    }), a.target.result.objectStoreNames.contains(s.CountObjName) || a.target.result.createObjectStore(s.CountObjName, {
                        keyPath: "level"
                    })
                }, c.onmousemove = function(b) {
                    var c = a.toMapCoordinate(a.moveX, a.moveY).split(","),
                        d = y([parseFloat(c[0]), parseFloat(c[1])]);
                    d ? (q.innerHTML = d, q.style.left = b.clientX + 10 + "px", q.style.top = b.clientY - 18 + "px", q.style.display = "block") : q.style.display = "none"
                }, c.onmouseout = function() {
                    q.style.display = "none"
                }
            }, this.reset = function(a) {
                e = [], f = [], g = [], i = 0;
                var b = s.db.transaction([s.DataObjName, s.CountObjName], "readwrite");
                b.oncomplete = function() {
                    z(), a && a()
                }, b.onerror = function(a) {
                    console.log("IndexedDB clear error:" + a)
                }, b.objectStore(s.DataObjName).clear(), b.objectStore(s.CountObjName).clear()
            }, this.appendData = function(a, b) {
                var c = [];
                for (var d in a) {
                    var e = a[d];
                    if (!(e.length < 2)) {
                        var h = B(H([parseFloat(e[0]), parseFloat(e[1])]), j),
                            k = e[2] ? parseFloat(e[2]) : 1;
                        for (i += k; h.length >= 4;) {
                            var l = F(h),
                                m = h.length / 2;
                            null == c[l] ? (null == f[m] ? f[m] = 1 : f[m] += 1, c[l] = k) : c[l] += k, c[l] > (0 | g[m]) && (g[m] = c[l]), h = h.substring(0, h.length - 2)
                        }
                    }
                }
                u(c, b)
            }, this.appendDataMap = function(a, b, c, d, h) {
                if (reset(), null == c || null == d) {
                    var j = 0;
                    for (var k in a) {
                        var l = G(k).length / 2;
                        null == f[l] ? (f[l] = 1, length > maxLength && (maxLength = l, i = a[k])) : (gridCount[length] += 1, l == j && (i += a[k])), a[k] > (0 | g[l]) && (g[l] = e[encodedKey])
                    }
                } else f = c, i = d, g = h;
                u(e, b)
            };
            var u = function(a, b) {
                    var c = s.db.transaction([s.DataObjName, s.CountObjName], "readwrite");
                    c.oncomplete = function() {
                        z(), b && b()
                    }, c.onerror = function(a) {
                        console.log("IndexedDB write error:" + a)
                    };
                    var d = c.objectStore(s.DataObjName);
                    for (var e in a) ! function(b) {
                        d.get(b).onsuccess = function(c) {
                            d.put({
                                geohash: b,
                                value: a[b] + (c.target.result ? c.target.result.value : 0)
                            })
                        }
                    }(e);
                    var h = c.objectStore(s.CountObjName);
                    h.clear();
                    for (var j in f) h.put({
                        level: parseInt(j),
                        count: f[j],
                        max: g[j]
                    });
                    h.put({
                        level: "all",
                        total: i
                    })
                },
                v = function(a, b) {
                    if (b)
                        if (e[a]) b(e[a]);
                        else {
                            var c = s.db.transaction([s.DataObjName]);
                            c.onerror = function(a) {
                                console.log("IndexedDB read error:" + a)
                            };
                            var d = c.objectStore(s.DataObjName);
                            d.get(a).onsuccess = function(c) {
                                var d = 0;
                                c.target.result && (d = c.target.result.value), e[a] = d, b(d)
                            }
                        }
                },
                w = function() {
                    var b = a.getZoomLevel();
                    k = b > j - l ? j : b + l
                };
            this.setSize = function(a) {
                l = a, m = 256 >> l, z()
            }, this.setRander = function(a) {
                p = a ? a : x(), z()
            }, this.hide = function() {
                n = !1, z()
            }, this.show = function(a, b) {
                n = !0, null != a && this.setSize(a), b && this.setRander(b), p || (p = x()), z()
            };
            var x = function() {
                    return function(a) {
                        var b = {
                                fillType: "solid",
                                lineWidth: 0,
                                strokeStyle: "rgba(255,255,255,0)"
                            },
                            c = null;
                        return 0 == a.value ? b.fillStyle = "rgba(255,255,255,0)" : (c = {
                            showType: "popup",
                            content: a.value
                        }, b.fillStyle = "rgba(255,0,0," + a.value / a.max + ")"), {
                            rect: b,
                            text: c
                        }
                    }
                },
                y = function(b) {
                    return t.MHeatMap && (pos = a.toScreenCoordinate(b[0] + "," + b[1])) && t.MHeatMap.getDataAt(pos[0], pos[1]) || h[F(B(H(b), k))]
                },
                z = function() {
                    var j = c.getContext("2d");
                    if (j.clearRect(0, 0, c.width, c.height), !n) return void(c.width > 0 && (c.width = 0, c.height = 0));
                    w(), A();
                    var l = 0;
                    for (var q in e) l++;
                    l >= 1e4 && e.splice(0, 5e3), h = [];
                    var r = 2 * b / (1 << k),
                        s = r / 2,
                        u = a.getZoomLevel(),
                        x = 2 * b / 256 / (1 << u);
                    c.width = (o.right - o.left + r) / x, c.height = (o.up - o.down + r) / x, a.disableHeatmap && a.disableHeatmap();
                    for (var y = [], z = (parseInt((o.right - o.left) / r) + 1) * (parseInt((o.up - o.down) / r) + 1), C = o.left; C < o.right + r; C += r)
                        for (var D = o.down; D < o.up + r; D += r) {
                            var E = B([C + s, D + s], k);
                            ! function(b, d, e) {
                                b = F(b), v(b, function(l) {
                                    var n = (d - o.left) / x,
                                        q = c.height - (e + r - o.down) / x,
                                        u = p({
                                            value: l,
                                            total: i,
                                            max: g[k],
                                            count: f[k]
                                        }, {
                                            zoom: k,
                                            gridSizePixel: m,
                                            gridBound: {
                                                left: d - o.left,
                                                top: e - o.down,
                                                rigth: d - o.left + r,
                                                bottom: e - o.down + r
                                            }
                                        });
                                    if (u.rect) {
                                        switch (j.beginPath(), j.rect(n, q, m, m), u.rect.fillType.toLowerCase()) {
                                            case "none":
                                                break;
                                            case "solid":
                                                j.fillStyle = u.rect.fillStyle, j.fill();
                                                break;
                                            case "linear":
                                                for (var v = u.rect.fillStyle.split(" "), w = j.createLinearGradient(n + parseInt(v[0]), q + parseInt(v[1]), n + parseInt(v[2]), q + parseInt(v[3])), A = 4; A < v.length; A += 2) A + 1 < v.length && w.addColorStop(v[A], v[A + 1]);
                                                j.fillStyle = w, j.fill();
                                                break;
                                            case "radial":
                                                for (var v = u.rect.fillStyle.split(" "), w = j.createRadialGradient(n + parseInt(v[0]), q + parseInt(v[1]), v[2], n + parseInt(v[3]), q + parseInt(v[4]), v[5]), A = 6; A < v.length; A += 2) A + 1 < v.length && w.addColorStop(v[A], v[A + 1]);
                                                j.fillStyle = w, j.fill();
                                                break;
                                            case "image":
                                                var B = new Image;
                                                B.src = u.rect.fillStyle, B.complete ? j.drawImage(B, n, q, m, m) : (B.onload = function() {
                                                    j.drawImage(B, n, q, m, m)
                                                }, B.onerror = function() {
                                                    console.log("图片加载失败:" + B.src)
                                                });
                                                break;
                                            case "heatmap":
                                                if (l > 0) {
                                                    var C = I([d + s, e + s]);
                                                    y.push({
                                                        lon: C[0],
                                                        lat: C[1],
                                                        value: l
                                                    })
                                                }
                                        }
                                        j.lineWidth = u.rect.lineWidth, j.strokeStyle = u.rect.strokeStyle, j.stroke(), j.closePath()
                                    }
                                    if (u.text) switch (u.text.showType) {
                                        case "inmap":
                                            j.fillStyle = u.text.fillStyle, j.font = u.text.font, j.textAlign = "center", j.textBaseline = "middle", j.fillText(u.text.content, n + m / 2, q + m / 2);
                                            break;
                                        case "popup":
                                            h[b] = u.text.content
                                    }
                                    0 == --z && y.length > 0 && (a.hideHeatmap(), t.MHeatMap = a.enableHeatmap({
                                        minZoomLevel: a.getZoomLevel(),
                                        maxZoomLevel: a.getZoomLevel(),
                                        radius: 4 * m / 3,
                                        dataMax: g[k],
                                        dataMin: 0
                                    }, y), a.showHeatmap())
                                })
                            }(E, C, D)
                        }
                    var G = I([o.left, o.up + r]);
                    d.setPoint(new MPoint(G[0], G[1]), !0)
                },
                A = function() {
                    var b = a.getViewBound(),
                        c = parseFloat(b.LeftUp.split(",")[0]),
                        d = parseFloat(b.LeftUp.split(",")[1]),
                        e = parseFloat(b.RightDown.split(",")[0]),
                        f = parseFloat(b.RightDown.split(",")[1]),
                        g = C(B(H([c, f]), k)),
                        h = C(B(H([e, d]), k));
                    o = {
                        left: g[0],
                        up: h[1],
                        right: h[0],
                        down: g[1]
                    }
                },
                B = function(a, c) {
                    for (var d = D(a[0], -b, b, c), e = D(a[1], -b, b, c), f = new Array, g = 0; c > g; g++) f.push(d[g]), f.push(e[g]);
                    return f.join("")
                },
                C = function(a) {
                    for (var c = a, d = new Array, e = new Array, f = 0; f < c.length; f += 2) d.push(c[f]), e.push(c[f + 1]);
                    var g = E(d, -b, b),
                        h = E(e, -b, b);
                    return [g, h]
                },
                D = function(a, b, c, d) {
                    for (var e = new Array, f = 0; d > f; f++) {
                        var g = (b + c) / 2;
                        a >= g ? (e.push(1), b = g) : (e.push(0), c = g)
                    }
                    return e
                },
                E = function(a, b, c) {
                    for (var d = 0, e = 0; e < a.length; e++) d = (b + c) / 2, "1" == a[e] ? b = d : c = d;
                    return b
                },
                F = function(a) {
                    for (var b = [], c = 0; c < a.length; c += 4) b.push(c + 3 < a.length ? String.fromCharCode(65 + 8 * a[c] + 4 * a[c + 1] + 2 * a[c + 2] + 1 * a[c + 3]) : 2 * a[c] + 1 * a[c + 1]);
                    return b.join("")
                },
                G = function(a) {
                    for (var b = [], c = 0; c < a.length; c++) {
                        var d = a.charCodeAt(c);
                        d >= 65 ? (d -= 65, b.push(Math.floor(d / 8)), b.push(Math.floor(d % 8 / 4)), b.push(Math.floor(d % 4 / 2)), b.push(d % 2)) : (d -= 48, b.push(Math.floor(d / 2)), b.push(d % 2))
                    }
                    return b
                },
                H = function(a) {
                    var c = a[0] * b / 180,
                        d = Math.log(Math.tan((90 + a[1]) * Math.PI / 360)) * b / Math.PI;
                    return [c, d]
                },
                I = function(a) {
                    var c = a[0] / b * 180,
                        d = 180 / Math.PI * (2 * Math.atan(Math.exp(a[1] / b * 180 * Math.PI / 180)) - Math.PI / 2);
                    return [c, d]
                }
        }
    })
}();